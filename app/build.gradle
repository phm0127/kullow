apply plugin: 'com.android.application'

android {
    /* Use Java 8 Library */
    compileOptions {
        sourceCompatibility '1.8'
        targetCompatibility '1.8'
    }
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.kullow"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            ext.enableCrashlytics = false
        }
    }
    flavorDimensions "version"
    productFlavors{
        // 빌드 변형 구성, 빌드 속도 최적화
        // https://developer.android.com/studio/build/build-variants.html
        demo {
            dimension "version"
            applicationIdSuffix ".demo"
            versionNameSuffix "-demo"
        }
        full {
            dimension "version"
            applicationIdSuffix ".full"
            versionNameSuffix "-full"
        }
    }
    /* ./gradlew test */
    testOptions{
        testOptions {
            unitTests.includeAndroidResources = true
            unitTests.all {
                reports {
                    junitXml.enabled = true
                    html.enabled = false
                }
            }
        }
    }
    /**
     * Add lintOptions to the gradle plugin
     *
     * By adding a lintOptions section to your build.gradle you can now
     * customize how lint is run with all the same flags available to
     * the command line runner (except for the flags querying available
     * lint checks etc).
     * @Reference https://android-review.googlesource.com/q/I2c14282165c3c772b7c4e6fbcb2cae978ebd3eb0
     */
    /* ./gradlew lint */
    lintOptions {
        // Don't abort if Lint finds an error, otherwise the Jenkins build
        // will be marked as failed, and Jenkins won't analyse the Lint output
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
